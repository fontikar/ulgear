

```{r}
pacman::p_load(rvest, googlesheets4, tidyverse, tidytext, here)

source(here("R/text_cleaning.R"))
```

### My google sheet 

Containing URLS and ideally the stuff I want to scrape for

<!-- How do I read this in without authenticating each time? -->

```{r}
gs4_deauth()

data <- read_sheet("https://docs.google.com/spreadsheets/d/11LaC3Eh5Y_YLsO08YJ_JTxO-b6qnbu_eZLK0NTZGS-Q/edit?gid=0#gid=0")
```

### Proof of concept

Let's just try to do this for one website first

#### [Durston X Mid 1](https://durstongear.com/products/x-mid-1-tent-ultralight-backpacking?srsltid=AfmBOoo6yPP8g496tbJ18WFmLgMocdIWQX47hEl-lEPiUeMJayu7NrVi&variant=48282868121891)

Following slides from [Hadley's rvest workshop ](https://github.com/hadley/web-scraping)

```{r}
# Define the URL
url <- data$Link[1]

# Convert the URL into an html
html <- read_html(url)

# Find the "row" - the parts of the code you want to extract?
row <- html_elements(html, ".feature-chart__value")

table_vals <- row |> html_element("p") |> html_text2() 

html |> 
    html_element(".feature-chart__heading") |> html_text2() 

html |> 
    html_elements(".feature-chart") |>
    html_element(".feature-chart__table-row") |>
    html_element(".feature-chart__heading")

spec_text <- row |> 
  html_element("p") |> 
  html_text2()
```

### Let's wrangle this text...

Not sure if that was the best way to extract the data but let's wrangle with this for now
Looks like 1 - 36 are the table data that I want from the `Specs` tab
37 - 53 are from the `Features` tab
54 - onwards are from`Compare` tab

```{r}
spec_text |> 
  tibble() |> 
  slice(1:36)
```

Looks like every odd value element is the component and the even value element is the spec value

```{r}
spec_tab <- spec_text[1:36]

# The components
spec_tab[seq(1, length(spec_tab), by = 2)]
# Their values
spec_tab[seq(2, length(spec_tab), by = 2)]
```

#### Let's clean up the values a little

Ok that wasn't so terrifying

```{r}
part_vals <- spec_tab[seq(2, length(spec_tab), by = 2)] 


gsub('\"', '', part_vals, fixed=TRUE) |>  #Remove forward slashes and " inches
  str_replace(regex('\\n'), " ")  |>  # Replace newline notation \n with a space
str_split(regex('/')) -> clean_vals
```

# I want to split oz and grams into separate cols

```{r}
clean_vals[[1]][1] 

clean_vals |> 
  map(function(x) x[1]) |> 
  list_c() |> 
  trimws()

clean_vals |> 
  map(function(x) x[2]) |> 
  list_c() |> 
  trimws()
```


#### Put it in a tibble

Not perfect yet, missing: 
- Warranty in first col
- Canopy and Floor Fabric value should = "20D Sil/PE Polyester 3500mm HH in Grey", it got split when we split oz/g
- No metric conversion for Stakes lengths
- No imperial conversion for Stakes weights
- NA in `value_metric` should be the same as `value_imperial`


```{r}
unprocessed_durston_df <- tibble(part = spec_tab[seq(1, length(spec_tab), by = 2)],
       value_imperial = clean_vals |> 
         map(function(x) x[1]) |> 
         list_c() |> 
         trimws(),
       value_metric = clean_vals |> 
         map(function(x) x[2]) |> 
         list_c() |> 
         trimws())
```

##### Fix the warranty column

```{r}
durston_warranty_fixed_df <- unprocessed_durston_df |> 
  mutate(part = case_when(
    str_detect(value_imperial, "years") ~ "Warranty",
    TRUE ~ part
  ))
```

##### Concat Fabric information: 20D Sil/PE Polyester 3500mm HH in Grey

```{r}
duston_fabric_fixed_df <- durston_warranty_fixed_df |> 
  mutate(value_imperial = case_when(
    str_detect(part, "Fabric") ~ paste(value_imperial, value_metric, sep = "/"),
    TRUE ~ value_imperial
  ),
  value_metric = case_when(
    str_detect(part, "Fabric") ~ value_metric, 
    TRUE ~ value_metric
  )
  )
```

##### '8 DAC J Stakes' as part value instead of 'Stakes'

```{r}
duston_fabric_fixed_df[duston_fabric_fixed_df$part == "Stakes",]$value_imperial |> 
  str_extract("^[^\\(]+") |> 
  str_trim()

duston_stakes_unpacked_df <- 
  duston_fabric_fixed_df |> 
  mutate(part = case_when(
    str_detect(part, "^Stakes") ~ str_extract(value_imperial, "^[^\\(]+") |> str_trim(),
    TRUE ~ part
  ),
  value_imperial = case_when(
    str_detect(part, "^8") ~ str_extract(value_imperial, "(?<=\\().*(?=\\))") |> str_trim(),
    TRUE ~ value_imperial
  ),
  value_metric = case_when(
    str_detect(part, "^8") ~ value_imperial,
    TRUE ~ value_metric
  )
  )
```

##### If NA in `value_metric` should be the same as `value_imperial`

```{r}
durston_complete_df <- duston_stakes_unpacked_df |>
  mutate(value_metric = case_when(
    is.na(value_metric) ~ value_imperial, 
    TRUE ~ value_metric
  ))
```

I think we need a column of units (oz, inches, grams), so we need a long df first. 
Need a column to delineate whether something has dimensions or just a description
and if it has a description, the measurement_type should be NA

```{r}
durston_long_df <- durston_complete_df |> 
  pivot_longer(cols = starts_with("value"), names_to = "measurement_system", values_to = "value") |> 
  mutate(measurement_system = str_extract(measurement_system, "(?<=_).*"),
         has_dimensions = case_when(
           str_detect(part, "Canopy|Fabric|Zippers|Warranty") ~ 0,
           TRUE ~ 1
         ) 
) |> 
  relocate(has_dimensions, .after = part) |> 
  mutate(measurement_system = case_when(
    has_dimensions == 0 ~ NA_character_,
    TRUE ~ measurement_system
  ),
  measurement_type = case_when(
    str_detect(part, "Length|Area|Height|Width|Footprint|Size") ~ "measured",
    has_dimensions == 0 ~ NA_character_,
    TRUE ~ "weighed"
  )
  ) |> 
  relocate(measurement_type, .after = measurement_system) |> 
  print(n = Inf)
```

#### Pivot out and Lengths and Widths as columns

```{r}
durston_measured_dimensions <- durston_long_df |> 
  filter(measurement_type == "measured") |> 
  mutate(dimension = word(part,2),
         dimension = tolower(dimension),
         part = word(part,1)) 

# Join back to long df
durston_long_dimension_df <- durston_long_df|> 
  filter(!measurement_type == "measured"| is.na(measurement_type)) |> 
  bind_rows(durston_measured_dimensions) |> 
  relocate(dimension, .after = measurement_type) |> 
  mutate(dimension = case_when(
    measurement_type == "weighed" ~ "mass",
    TRUE ~ dimension
  )) |> 
  arrange(measurement_type) |> 
  print(n = Inf)

```

### Measurements

Clean up `value` column

- Split up the two values for area for Fly and Vestibule 
- Compute area for Fly and Vestibule
- Take the units and put them in a col

####  Fly and Vestibule 

```{r}
durston_fly_vest_df <- durston_long_dimension_df |> 
  filter(measurement_type == "measured") |> 
  filter(part %in% c("Fly", "Vestibule"))

area_values <- durston_fly_vest_df |> 
  pull(value)

area_values |> str_split("x") |> 
  map(function(x) x[[1]]) |> 
  list_c() |> 
  str_trim() |> 
  str_extract("\\d+\\.?\\d*")

area_values |> str_split("x") |> 
  map(function(x) x[[1]]) |> 
  list_c() |> 
  str_trim() |> 
  str_extract("[a-zA-Z]+")


area_values |> str_split("x") |> 
  map(function(x) x[[2]]) |> 
  list_c() |> 
  str_trim() |> 
  str_extract("\\d+\\.?\\d*")

durston_fly_vest_unpacked_df <- durston_fly_vest_df |> 
  mutate(length = str_split(value, "x") |> 
           map(function(x) x[[1]]) |> 
           list_c() |> 
           str_trim() |> 
           str_extract("\\d+\\.?\\d*"),
         length_units = area_values |> str_split("x") |> 
           map(function(x) x[[1]]) |> 
           list_c() |> 
           str_trim() |> 
           str_extract("[a-zA-Z]+"),
         width = str_split(value, "x") |> 
           map(function(x) x[[2]]) |> 
           list_c() |> 
           str_trim() |> 
           str_extract("\\d+\\.?\\d*"),
         width_units = 
           area_values |> str_split("x") |> 
           map(function(x) x[[2]]) |> 
           list_c() |> 
           str_trim() |> 
           str_extract("[a-zA-Z]+")
  ) 
```

##### Pivot length/width back to dimensions 

Add units and Compute area for Fly and Vestibule

```{r}
durston_fly_vest_tidied_df <- 
  durston_fly_vest_unpacked_df |> 
  mutate(
    across(
      .cols = c(length, width),
      as.numeric),
    area = length * width
  ) |> 
  select(-c(dimension,value)) |> 
  pivot_longer(c(length, width, area), names_to = "dimension", values_to = "value") |> 
  mutate(
    units = coalesce(length_units, width_units),
    units = case_when(
      is.na(units) & measurement_system == "imperial" &  measurement_type == "measured" ~ "in",
      measurement_system == "metric" &  measurement_type == "measured" ~ "cm",
      units == "sq" ~ "sqft",
      dimension == "area" ~ paste0(units,"^2"),
      TRUE ~ units
    ),
    units = case_when(
      dimension == "area" ~ paste0(units,"^2"),
      TRUE ~ units
    )
  ) |> 
  select(-c(length_units, width_units)) 
```

####  Floor, Fly, Tent

```{r}
durston_fft_tidied_df <- durston_long_dimension_df |> 
  filter(measurement_type == "measured") |> 
  filter(!part %in% c("Packed", "Fly", "Vestibule")) |> 
  mutate(
    units = extract_units(value),
    units =  case_when(
      is.na(units) & measurement_system == "imperial" &  measurement_type == "measured" ~ "in",
      is.na(units) &  measurement_system == "metric" &  measurement_type == "measured" ~ "cm",
      units == "sq" ~ "sqft",
      TRUE ~ units
    ),
    units = case_when(
      dimension == "area" ~ paste0(units,"^2"),
      TRUE ~ units
    ),
    value = readr::parse_number(value),
  ) 
```

#### Packed size

```{r}
durston_packed_size_tidied_df <- durston_long_dimension_df |> 
  filter(measurement_type == "measured") |> 
  filter(part %in% "Packed") |> 
  mutate(
    units = extract_units(value),
    units = case_when(
      measurement_system == "imperial" & measurement_type == "measured" ~ "in",
      TRUE ~ units),
    value = remove_units(value)
    )
```


### Weighed

Fix Typical set up metric

```{r}
durston_weighed_preclean_df <- durston_long_df |> 
  filter(measurement_type == "weighed") |> 
  mutate(value = case_when(
    str_detect(part, "Typical") & measurement_system == "metric" ~  str_remove(value, "\\s*\\(.*\\)"),
    TRUE ~ value
  )
  )
```

##### Everything else but stakes

```{r}
durston_weighed_nostakes_tidied_df <- durston_weighed_preclean_df |> 
  filter(!str_detect(part, "8")) |> 
  mutate(units = extract_units(value),
         value = remove_units(value))
```

#### 8 DAC J Stakes


```{r}
durston_stakes_tidied_df <- durston_weighed_preclean_df |> 
  filter(str_detect(part, "8")) |> 
  separate_longer_delim(value, ";") |> 
  mutate(
         units = extract_units(value),
         value = remove_units(value),
         ) |> 
  mutate(stake_mass = str_extract(value, "(?<=@ )\\d+"),
         stake_length = str_extract(value, "(?<=x )\\d+"),
         stake_quantity= str_extract(value, "^\\d")
         ) |> 
  select(-value) |> 
  pivot_longer(starts_with("stake"), names_to = "dimension", values_to = "value") |> 
  mutate(
    units = case_when(
    dimension == "stake_quantity" ~ NA_character_,
    dimension == "stake_mass" & measurement_system == "imperial" ~ "oz",
    dimension == "stake_length" & measurement_system == "imperial" ~ "in",
    dimension == "stake_length" & measurement_system == "metric" ~ "cm",
    TRUE ~ units
  ),
  ) |> 
  mutate(
    measurement_type = case_when(
      str_detect(dimension, "length") ~ "measured",
      str_detect(dimension, "quantity") ~ "counted",
      TRUE ~ measurement_type
    )
  ) |> 
  mutate(
    value = as.numeric(value),
    value = case_when(
      dimension == "stake_mass" & measurement_system == "imperial" ~ value/28.34,
      dimension == "stake_length" & measurement_system == "metric" ~ value*2.54,
      TRUE ~ value
    )
  )
```

### Put it all together

```{r}
durston_list <- list(durston_fly_vest_tidied_df,
                     durston_fft_tidied_df,
                     durston_weighed_nostakes_tidied_df,
                     durston_stakes_tidied_df,
                     durston_long_dimension_df |> 
                       filter(is.na(measurement_type))
)


durston_tidied_df <- map(durston_list,
    convert_numeric_value_to_char) |> 
  list_rbind()

dim(durston_long_df) 
dim(durston_tidied_df)


durston_tidied_df |> print(n = Inf)
durston_long_df |> print(n = Inf)
```

